//
// LibraryAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
#if canImport(AnyCodable)
import AnyCodable
#endif

open class LibraryAPI {

    /**
     This is a summary
     
     - returns: AnyPublisher<[RadioStationDTO], Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getAllRadioStations() -> AnyPublisher<[RadioStationDTO], Error> {
        var requestTask: RequestTask?
        return Future<[RadioStationDTO], Error> { promise in
            requestTask = getAllRadioStationsWithRequestBuilder().execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     This is a summary
     - GET /stations
     - This is a description
     - returns: RequestBuilder<[RadioStationDTO]> 
     */
    open class func getAllRadioStationsWithRequestBuilder() -> RequestBuilder<[RadioStationDTO]> {
        let localVariablePath = "/stations"
        let localVariableURLString = RadioStationsAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[RadioStationDTO]>.Type = RadioStationsAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
